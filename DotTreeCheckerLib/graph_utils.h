#pragma once
#include<vector>
#include<string>
#include"Graph.h"


/**
* @file graph_utils.h
* @brief Заголовочный файл с функциями для обхода ориентированного графа в глубину и поиска остова.
*/


/**
* @brief Рекурсивный обход графа в глубину (DFS), начиная с вершины start.
*
* @param start Индекс начальной вершины.
* @param visited Вектор посещенных вершин (будет обновлен).
* @param adjMatrix Матрица смежности графа.
* @param way Вектор дуг, формирующих путь остова (будет заполнен).
*/

void DFS(int start, std::vector<bool>& visited, std::vector<std::vector<int>>& adjMatrix, std::vector<std::pair<int, int>>& way);


/**
* @brief Ищет остов, покрывающий максимальное число вершин.
* @details Использует обход в глубину (DFS) для каждой вершины в графе.
*
* @param matrixCopy Копия матрицы смежности графа.
* @return Вектор дуг, составляющих найденный остов.
*/

std::vector<std::pair<int, int>> findBestSkeleton(std::vector<std::vector<int>> matrixCopy);


/**
 * @brief Удаляет ведущие и завершающие пробельные символы из строки.
 *
 * @param s Входная строка, из которой нужно удалить пробелы по краям.
 * @return Новая строка без пробелов в начале и конце.
 */

std::string trim(const std::string& s);


/**
 * @brief Удаляет пустые строки и обрезает пробелы по краям у каждой строки.
 * @details Используется для предварительной очистки входных данных графа перед парсингом.
 * Внутри применяется функция trim для удаления пробелов.
 *
 * @param lines Вектор строк, возможно содержащий пустые строки.
 * @return Новый вектор строк без пустых и с обрезанными пробелами.
 */

std::vector<std::string> cleanLines(const std::vector<std::string>& lines);


/**
 * @brief Парсит граф, описанный в формате DOT, и строит его матрицу смежности.
 *
 * @param lines Вектор строк, содержащий DOT-описание ориентированного графа.
 * @return Структура Graph, содержащая:
 * - исходные строки DOT-кода,
 * - матрицу смежности графа,
 * - отображение имен вершин в индексы и обратно.
 */

Graph parseDotFile(const std::vector<std::string>& lines);


/**
 * @brief Структура для хранения сообщений в формате DOT, используемых для визуализации результатов проверки графа на дерево.
 * 
 * @details Структура `outMessForGraph` содержит предопределённые строки, представляющие различные состояния и рекомендации при анализе графа на предмет его соответствия дереву.
 * Эти строки могут использоваться в графической визуализации (например, с помощью Graphviz).
 */

struct outMessForGraph
{
    /// Строка DOT-подобного кода для отображения сообщения о том, что граф является деревом.
    /// Зеленый цвет используется для выделения положительного результата.
    const std::string graphIsTree = "c[color = green label = \"Граф является деревом\", fontcolor = green]";

    /// Строка DOT-подобного кода, применяемая к ребрам или вершинам, которые рекомендуется удалить,
    /// чтобы граф стал деревом. Отмечаются красным цветом.
    const std::string forRemove = "[color=red]";

    /// Строка DOT-подобного кода с сообщением о том, что граф не является деревом,
    /// и рекомендацией по удалению изолированных вершин после удаления дуг.
    const std::string graphIsNotTree = "c[color = red label = \"Если при удалении рекомендуемой дуги остается изолированная вершина, такую вершину следует удалить\"]";
};
